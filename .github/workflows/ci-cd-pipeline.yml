name: CI/CD Pipeline

on:
  push:
    branches: [ master ]

jobs:
  # Build and Security Scanning
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      # Docker Linting and Security Scan (Hadolint)
      - name: Lint Dockerfile
        run: docker run --rm -i hadolint/hadolint hadolint --ignore DL3008 - < Dockerfile

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_TOKEN }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      # Build and Push Docker image
      - name: Build and Push Docker image
        run: |
          docker build -t "${{ secrets.DOCKER_USERNAME }}"/flask-app:latest .
          docker push "${{ secrets.DOCKER_USERNAME }}"/flask-app:latest

      # Vulnerability Scanning with Trivy
      # Vulnerability Scanning with Trivy
      - name: Docker Image Security Scan with Trivy
        run: |
            docker pull aquasec/trivy:latest
            docker run --rm \
              -v /var/run/docker.sock:/var/run/docker.sock \
              aquasec/trivy:latest \
              image "${{ secrets.DOCKER_USERNAME }}/flask-app:latest"


  # Deploy to Kubernetes
  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    # Set up Kind Kubernetes Cluster
    - name: Deploy to Kind Kubernetes Cluster
      run: |
        kind create cluster
        kubectl apply -f deployment.yaml
        kubectl apply -f services.yaml

    #  use Trivy to scan the Docker image for vulnerabilities
    - name: Install Trivy
      run: |
          sudo apt-get update
          sudo apt-get install -y trivy

    - name: Docker Image Security Scan with Trivy
      run: |
          trivy image "${{ secrets.DOCKER_USERNAME }}/flask-app:latest"
      
    # Check for Kubernetes Best Practices using kube-linter
    - name: Run kube-linter for Kubernetes YAML checks
      run: |
        curl -Lo kube-linter.tar.gz https://github.com/stackrox/kube-linter/releases/latest/download/kube-linter-linux-amd64.tar.gz
        tar -xvf kube-linter.tar.gz kube-linter
        chmod +x kube-linter
        ./kube-linter lint deployment.yaml services.yaml

    # Check for Policy Violations using OPA
    - name: Kubernetes Policy Checks with OPA
      run: |
        curl -L -o opa https://openpolicyagent.org/downloads/latest/opa_linux_amd64
        chmod +x opa
        ./opa eval --format pretty 'data.kubernetes.admission.deny = {"msg": msg}'

